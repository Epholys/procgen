#ifndef COLORS_H
#define COLORS_H


#include <unordered_map>
#include <vector>
#include <SFML/Graphics/Color.hpp>

// Namespace dedicated to color generation.
namespace colors
{
    // Associate a unique color to each identifier.
    // The color are generated by selecting a specific hue. First it subdivides
    // the [0,1] range in 5 values, then select the value at the middle of the
    // interval between two values. The saturation and value component of HSV
    // are set to '0.8'.
    // 
    // Usage: to get a unique color associated to an identifier, use
    // 'register_id(id)'. 'get_color(id)' is used to get again the color
    // associated to 'id'. 'remove_id(id)' remove the identifier and the
    // associated color is marked as available for a new identifier.
    // 
    // Invariant:
    //   - Each color of 'map_' is unique.
    //   - Each identifier of 'map_' is unique.
    class UniqueColor
    {
    public:
        // Register an identifier 'id' and returns a unique color.
        // If there is no available colors, generate a new color.
        // Otherwise, link 'id' to an available color.
        // Precondition:
        //   - 'id' must be positive
        //   - 'id' must not be already registered.
        sf::Color register_id(int id);

        // Remove an identifier 'id' from the 'map_' and mark its associated
        // color as available.
        // Precondition:
        //   - 'id' must be registered.
        void remove_id(int id);

        // Get the color associated to the identifier 'id'.
        //   - 'id' must be registered.
        sf::Color get_color(int id);

    private:
        // Generate a new unique color.
        sf::Color new_color();

        // Set of color/identifier associations. A value of '-1' for an
        // identifier means the color associated is available.
        std::vector<std::pair<sf::Color, int>> map_;

        // Color generator variable.
        // Iteration number of the 'pass_'th pass.
        int iter_ {0};
        // The 'pass_' number. Each pass generate a color in a smaller
        // subdivision. 
        int pass_ {0};
    };
}


#endif // COLORS_HPP
