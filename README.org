* Procedural Generation Experiments

#+html: <p align="center"><img src="media/screenshot.png" /></p>

** Philosophy
  - Highly interactive
  - Climbing the [[http://worrydream.com/LadderOfAbstraction/][ladder of abstraction]]

** Implemented
   - (Simple) L-systems
   - (Simple) Turtle interpretation
   - Static GUI to display parameters
   - Dynamic GUIs to interact with the parameters
   - Basic and necessary user interactions (mouse dragging, adding, removing, copy-pasting)
   - Saving and loading LSystems to and from files
   - Complete system of colors

** Main Roadmap
   1. Polish before the first release
      * Move from makefiles to CMake
      * Compile and package for Linux and Windows
   2. BIG REFACTORING
      * Complete test suit
      * Remove a maximum of code smells
      * Refactor old code
   2. Add automation:
      * Loading file from command-line
      * Generating image(s) from command-line
      * Adding a second/alternative layer to generate save files without hacking the polymorphism
   3. Make the generated vertices pretty (growth, visual effects) (example in dev.time and dev.width)
      * Growth as the turtle order, recursion order, ...
      * Rectangle of different widths for recursion
      * Shaders
   4. Extend the turtle interpretation
      * Angle jitter
      * Color Palette
      * Invisible lines
   5. Add genetic algorithm or constraint-based algorithm for new LSystem generation
   6. Extend the L-System
      * Parametric L-System
      * Context-sensitive L-System
      * Stochastic L-System
      * Parameters for each interpretation order (step for go_forward, delta_angle for turn_*)

** Compiling
   Make sure you have SFML installed, a C++17 compiler (with std::filesystem support), and make.
   Simply type =make optimized= :).
   Other make recipees are documented in the Makefile.

** Development framework
   - *Environment:* debian sid chroot with these development packages: =g++ make git libsfml-dev googletest gdb valgrind=
   - *Dependencies:*
     - SFML / 2.5.1 / [[https://www.sfml-dev.org/][Website]] / installed from packages /
     - googletest / 1.9.0 / [[https://github.com/google/googletest][Github Repository]] / installed from packages
     - dear imgui, / 1.71 WIP / [[https://github.com/ocornut/imgui][Github Repository]] / installed from repo's release / included in the repo
     - imgui-sfml / [[https://github.com/eliasdaler/imgui-sfml][Github Repository]] / installed via the instructions from the
       README.org of the repository / included in the repo with patches
     - GSL (Guidelines Support Library) / 2018-05-21 / [[https://github.com/Microsoft/GSL][Github Repository]] / cloned from the repository / included in the repo
     - cereal / 1.2.2 / [[https://uscilab.github.io/cereal/index.html][Website]] / downloaded from the website / included in the repo
   - *Coding rule:* [[https://github.com/isocpp/CppCoreGuidelines][ISO C++ Core Guidelines]] with GSL
     - Difference: [[https://en.wikipedia.org/wiki/Indentation_style#Allman_style][Allman indentation Style]]
     - Difference: When using ImGui ; ImGui style of coding
   - *Compilation:* =make= and C++17 needed
   - *Testing suite:* [[https://github.com/google/googletest/][googletest]]

*** Releases
    The dev branch is where the main line of work is conducted, a commit in this branch may not compile, the application may not behave properly, the tests may not pass, and the code may not be tested, or documented.
    The master branch is assured to compile, the application works as intended (except for known bugs), all the test passes, and the code is documented. However, the features may not be complete.

*** Warnings
   - The save format is not yet stable, the save files may not be compatible between two commits. It is however possible to manually edit them to support the new features. the 'saves' directory will always be populated with valid examples.
   - The API is not stable (and will probably never be, as this is a software and not a library)

** Completing the framework?
   - Static analysis (Coverity?)
   - Formal documentation (Doxygen?)
   - Automatic cross-compiling?
   - Automatic on-screen serialization?

** (Res)sources
[[http://blog.rabidgremlin.com/2014/12/09/procedural-content-generation-l-systems/][Procedural content generation: L-Systems (by Rabidgremlin)]]

[[http://algorithmicbotany.org/papers/#abop][The Algorithmic Beauty of Plants]]

[[https://www.reddit.com/r/lsystem/][/r/lsystem]]

[[http://jobtalle.com/lindenmayer_systems.html][Job Talle -- Lindermayer systems]]
