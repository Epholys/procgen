* Procedural Generation Experiments

#+html: <p align="center"><img src="media/screenshot.png" /></p>

** Philosophy
  - Highly interactive
  - Climbing the [[http://worrydream.com/LadderOfAbstraction/][ladder of abstraction]]

** Implemented
   - (Simple) L-systems
   - (Simple) Turtle interpretation
   - Static GUI to display parameters
   - Dynamic GUIs to interact with the parameters
   - Basic and necessary user interactions (mouse dragging, adding, removing, copy-pasting)
   - Saving and loading LSystems to and from files
   - Stub of colors

** Main Roadmap
   1. Make the generated vertices pretty (colors and growth) (example in dev.color and dev.time)
      * Painting the vertices by height, order of recursion, ...
      * Composite painting (e.g. i-th recursion brown, j-th recursion shade of greens)
      * Growth as the turtle order, recursion order, ...
      * Rectangle of different widths for recursion
      * Shaders ?
   2. RELEASE
   3. Add automation:
      * Loading file from command-line
      * Generating image(s) from command-line
      * Adding a second layer to generate save files without hacking the polymorphism
   4. Add genetic algorithm or constraint-based algorithm for new LSystem generation
   5. Extend the L-System and turtle interpretation
      * Parametric L-System
      * Context-sensitive L-System
      * Stochastic L-System
      * Parameters for each interpretation order (step for go_forward, delta_angle for turn_*)

** Known Bugs
   - double precision is not enough when dealing with big geometric L-systems
   - the GUI sometimes become irresponsive
   - Correct zoom level and drag behaviour when resizing window (in Gnome)

** Development framework
   - *Environment:* debian sid chroot with these development packages: =g++ make git libsfml-dev googletest gdb valgrind=
   - *Dependencies:*
     - SFML / 2.5 / [[https://www.sfml-dev.org/][Website]] / installed from packages / 
     - googletest / 1.8.0-10.1 / [[https://github.com/google/googletest][Github Repository]] / installed from packages
     - dear imgui, / 2018-05-21 / [[https://github.com/ocornut/imgui][Github Repository]] / cloned from the repository / included in the repo
     - imgui-sfml / 2018-05-21 / [[https://github.com/eliasdaler/imgui-sfml][Github Repository]] / installed via the instructions from the README.org of the repository / included in the repo
     - GSL (Guidelines Support Library) / 2017-06-27 / [[https://github.com/Microsoft/GSL][Github Repository]] / cloned from the repository / included in the repo
     - cereal / 1.2.2 / [[https://uscilab.github.io/cereal/index.html][Website]] / downloaded from the website / included in the repo
   - *Coding rule:* [[https://github.com/isocpp/CppCoreGuidelines][ISO C++ Core Guidelines]] with GSL
     - Difference: [[https://en.wikipedia.org/wiki/Indentation_style#Allman_style][Allman indentation Style]]
     - Difference: When using ImGui ; ImGui style of coding
   - *Compilation:* =make= and C++17 needed
   - *Testing suite:* [[https://github.com/google/googletest/][googletest]]

*** Releases
    The dev branch is where the main line of work is conducted, a commit in this branch may not compile, the application may not behave properly, the tests may not pass, and the code may not be tested, or documented.
    The master branch is assured to compile, the application works as intended (except for known bugs), all the test passes, and the code is documented. However, the features may not be complete.

*** Warnings
   - The save format is not yet stable, the save files may not be compatible between two commits. It is however possible to manually edit them to support the new features. the 'saves' directory will always be populated with valid examples.
   - The API is not stable (and will probably never be, as this is a software and not a library)

** Completing the framework?
   - Static analysis (Coverity?)
   - Formal documentation (Doxygen?)
   - Automatic cross-compiling?
   - Automatic on-screen serialization?

** Thoughts dump
  - Huge literature on the subject and extremely developed existing software. What does this project bring?
*** Memory allocation with Valgrind (2017-09-17)
    =valgrind --tool\=massif --time-unit\=B --peak-inaccuracy=0.1=

    Memory usage is directly linked to the size of the L-Systems calculated. These sizes grow exponentialy, so does the memory. As an example, with a simple L-System and 16 iterations, the resulting string is composed of tens of million of symbols. Saving these symbols and the 20-bytes-long vertices associated takes at least hundreds of MB in memory.
    Moreover, during the execution of =logo::computes_vertices=, we use a =std::vector= as data structure. Its allocation strategy (in g++ and MSVC) is to multiply the capacity by a number. As a consequence, this vector is at most "factor" times too large. In our case of hundreds of MB, it can be a serious toll. Fortunately, this vector is truncated when returned by the function.
    
    I don't see an *obvious* way to reduce memory consumption. Symbols and vertices are already very small. We could reduce the size of the aforementioned vector by reserving just enough bytes for the vertices. But that means we would have to approximate a small upper-bound of the result of the L-System and also how much of its symbols will produce a new vertex. A whole mathematical problem.

    For now, I'll do nothing: I see no reasonable case to computes and display so much iterations of a L-System. I'll concentrate on optimizing execution time (with memory consumption in mind).

*** Optimization ideas
    - Use raw OpenGL vertices instead of SFML's sf::Vertex to reduce their size (no texcoord for example)
    - Use `sqrt` instead of `cos` and `sin` for angles to calculate vertex's position



** (Res)sources
[[http://blog.rabidgremlin.com/2014/12/09/procedural-content-generation-l-systems/][Procedural content generation: L-Systems (by Rabidgremlin)]]

[[http://algorithmicbotany.org/papers/#abop][The Algorithmic Beauty of Plants]]

[[https://www.reddit.com/r/lsystem/][/r/lsystem]]

[[http://jobtalle.com/lindenmayer_systems.html][Job Talle -- Lindermayer systems]]
