#ifndef UNIQUE_COLOR_H
#define UNIQUE_COLOR_H


#include <SFML/Graphics/Color.hpp>
#include <unordered_map>
#include <vector>

// Namespace dedicated to color generation.
namespace colors
{
// Associate a unique color to each identifier.
// The color are generated by selecting a specific hue using golden ratio
// sampling (https://blog.bruce-hill.com/6-useful-snippets).
//
// Usage: Usually defined as a static member, this class must be used in
// coordination with UniqueId : it generates the identifiers and UniqueColor
// generates the colors. Otherwise, the first id MUST be 0 and each new id
// MUST be the next number after the last id.
//
// Invariant:
//   - Each color in 'colors_' is unique.
class UniqueColor
{
  public:
    // Get the color associated to the identifier 'id'.
    // Exceptions:
    //   - Precondition: The first call to this function must have a 'id' of
    //   0. Each new 'id' must the next number after the previous one.
    sf::Color get_color(int id);

  private:
    // Generate a new unique color. Must respect the invariant.
    sf::Color new_color();

    // Iteration number.
    int iter_ {0};

    // All the unique colors, indexed by their position in this vector.
    std::vector<sf::Color> colors_;
};
} // namespace colors


#endif // UNIQUE_COLOR_HPP
