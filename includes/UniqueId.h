#ifndef UNIQUE_ID_H
#define UNIQUE_ID_H


#include <tuple>
#include <vector>

// Associate a unique id to each identifier.
// The id are generated by selecting a specific hue. First it subdivides
// the [0,1] range in 5 values, then select the value at the middle of the
// interval between two values. The saturation and value component of HSV
// are set to '0.8'.
// 
// Usage: to get a unique id associated to an identifier, use
// 'register_id(id)'. 'get_id(id)' is used to get again the id
// associated to 'id'. 'remove_id(id)' remove the identifier and the
// associated id is marked as available for a new identifier.
// 
// Invariant:
//   - Each id of 'map_' is unique.
//   - Each identifier of 'map_' is unique.
class UniqueId
{
public:
    // // Register an identifier 'id' and returns a unique id.
    // // If there is no available ids, generate a new id.
    // // Otherwise, link 'id' to an available id.
    // // Precondition:
    // //   - 'id' must be positive
    // //   - 'id' must not be already registered.
    // sf::Id register_id(int id);
    int get_id();
        
    // Remove an identifier 'id' from the 'map_' and mark its associated
    // id as available.
    // Precondition:
    //   - 'id' must be registered.
    void remove_id(int id);

private:
    // Set of id/identifier associations. A value of '-1' for an
    // identifier means the id associated is available.
    // A std::map<> is not used as the '-1' id is not unique, or as the
    // sf::Id does not have a hash function.
    std::vector<std::tuple<int, bool>> map_ {};

    enum TupleElement
    {
        Id = 0,
        IsEmpty
    };

    int current_id_ {0};
};

#endif // UNIQUE_ID_HPP
