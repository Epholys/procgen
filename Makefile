# SYNOPSIS:
#
#   make all       - makes everything.
#   make release   - makes everything in release mode (optimized).
#   make optimized - makes everything in optimized mode (not portable)
#   make profiling - makes a executable easy to profile
#   make main      - makes the main executable.
#   make test      - makes tests.
#   make clean     - removes all files generated by make.

### Projet tree
INCLUDE_DIR = includes
SRC_DIR = src

### Flags passed to the C++ compiler: common, macros, include and linking flags.
CXXFLAGS = -std=c++17 -O3 -Wall -Wextra -pthread
MACROFLAGS += -DGSL_THROW_ON_CONTRACT_VIOLATION
LFLAGS     += -lsfml-system -lsfml-window -lsfml-graphics -lGL -lstdc++fs
IFLAGS     += -isystem . -I$(INCLUDE_DIR)

# Other flags
debug : CXXFLAGS = -std=c++17 -g -O0 -Wall -Wextra -pthread
debug : MACROFLAGS += -DDEBUG_CHECKS

profiling : CXXFLAGS += -g
optimized : CXXFLAGS += -march=native

coverage: CXXFLAGS = -std=c++17 -g -O0 -Wall -Wextra -pthread
coverage: MACROFLAGS += -DDEBUG_CHECKS
coverage: TESTFLAGS = --coverage -fno-inline -fno-inline-small-functions -fno-default-inline
coverage: LTESTFLAGS= --coverage

### Source files, Object Files, Directories, Targets, ...
# Core object files to compile for every target.
SRCS = $(wildcard $(SRC_DIR)/*.cpp)
INCLUDES = $(wildcard $(INCLUDE_DIR)/*.h)
INCLUDES += $(wildcard $(INCLUDE_DIR)/*.tpp)
ALL_OBJECTS = $(SRCS:%.cpp=%.o)
OBJECTS = $(filter-out $(SRC_DIR)/main.o, $(ALL_OBJECTS))

# 'dear imgui,' and 'imgui-sfml' object files to compile for the main target.
IMGUI_DIR = imgui
IMGUI_SRC = $(wildcard $(IMGUI_DIR)/*.cpp)
IMGUI_OBJ = $(IMGUI_SRC:$(IMGUI_DIR)/%.cpp=$(IMGUI_DIR)/%.o)

ALL_OBJECTS  += $(IMGUI_OBJ)

# Main executable
TARGET = procgen.out

# Tests object file to compile for the test target.
TEST_DIR  = test
TEST_SRC  = $(wildcard $(TEST_DIR)/*.cpp)
TEST_OBJ  = $(TEST_SRC:$(TEST_DIR)/%.cpp=$(TEST_DIR)/%.o)

# Complete Test Suite executable.
TEST_TARGET = $(TEST_DIR)/procgenTest.out


### Specific path, flags, source files for googletest
# Path the root of googletest
GTEST_DIR = /usr/src/googletest/googletest

# Flags passed to the preprocessor
GTEST_CPPFLAGS = -isystem $(GTEST_DIR)/include

# All Google Test headers.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Internal googletest variable.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)



all : format debug test

format:
	clang-format-9 -style=file -i $(SRCS) $(INCLUDES) $(TEST_SRC)


# Cleans all intermediate compilation files.
clean :
	rm -rf $(addprefix $(SRC_DIR)/,*.o *.a *.out *.gcda *.gcno) \
	$(addprefix  $(TEST_DIR)/, *.o *.a *.out *.gcda *.gcno) \
	$(addprefix $(IMGUI_DIR)/, *.o *.a *.out *.gcda *.gcno) \
	out/


# main: Links all the .o file from MAIN to TARGET.
main : $(ALL_OBJECTS)
	$(CXX) $(CXXFLAGS) $(TESTFLAGS) $(MACROFLAGS) -o $(TARGET) $^ $(LFLAGS) $(LTESTFLAGS)

# test: Links all OBJECTS, TEST files plus gtest_main.a into the test
#       suite TEST_TARGET.
test : $(OBJECTS) $(TEST_OBJ) $(TEST_DIR)/gtest_main.a
	$(CXX) $(GTEST_CPPFLAGS) $(TESTFLAGS) $(CXXFLAGS) -o $(TEST_TARGET) $^ $(IFLAGS) $(LFLAGS) $(LTESTFLAGS) -lpthread

# debug: only main but with debug flags
debug : main

coverage : format main test
	lcov --capture --initial --directory src/ --directory includes/ --directory test/ -o coverage-baseline.info
	./$(TEST_TARGET)
	lcov --capture --directory src/ --directory includes/ --directory test/ --output-file coverage.info
	lcov --add-tracefile coverage-baseline.info --add-tracefile coverage.info -o coverage-combined.info
	lcov --remove coverage-combined.info $(shell pwd)/test/\* $(shell pwd)/cereal/\* $(shell pwd)/imgui/\* $(shell pwd)/gsl/\* '/usr/include/*' '/usr/src/*' -o coverage-clean.info
	genhtml coverage-clean.info --output-directory out

# release: Same as main with optimization flags (see above).
release : main

# profiling: Same as main with optimization and debug flags (see above)
profiling : main

# optimized: Same as main with the even more optimization flags (see above)
optimized : main


# Each .o file is compiled with its associated *.cpp file.
%.o : %.cpp
	$(CXX) $(CXXFLAGS) $(TESTFLAGS) $(MACROFLAGS)  -c $^ -o $@ $(IFLAGS) $(LTESTFLAGS)

$(TEST_DIR)/%.o : $(TEST_DIR)/%.cpp
	$(CXX) $(GTEST_CPPFLAGS) $(CXXFLAGS) $(TESTFLAGS) -c $^ -o $@ $(IFLAGS) $(LTESTFLAGS)


# Compiles and archives googletest internals.
#   - gtest_main.a is used when test files are presented without the
#   main() function. gtest.a otherwise.
$(TEST_DIR)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(GTEST_CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(TEST_DIR)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(GTEST_CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(TEST_DIR)/gtest.a : $(TEST_DIR)/gtest-all.o
	$(AR) $(ARFLAGS)  $@ $^

$(TEST_DIR)/gtest_main.a : $(TEST_DIR)/gtest-all.o $(TEST_DIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Compiles every *Test.cpp.
# $(TEST_DIR)/%Test.o : $(TEST_DIR)/%Test.cpp
#	$(CXX) $(GTEST_CPPFLAGS) $(CXXFLAGS) -c $^ -o $@ $(IFLAGS)
